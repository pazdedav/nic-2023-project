name: deploy-toy-website-test
concurrency: toy-company

on:
  push:
    branches:
      - main
  pull_request:
    branches:
    - main
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AZURE_RESOURCEGROUP_NAME: ToyWebsiteTest
  ENVIRONMENT_TYPE: Test
  AZURE_STORAGE_ACCOUNT_NAME: dp8483strg

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Run Bicep linter
      run: az bicep build --file deploy/main.bicep

  validate:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: azure/login@v1
      name: Sign in to Azure
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    - uses: azure/arm-deploy@v1
      name: Run preflight validation
      with:
        deploymentName: ${{ github.run_number }}
        resourceGroupName: ${{ env.AZURE_RESOURCEGROUP_NAME }}
        template: ./infra/deploy.bicep
        parameters: environmentType=${{ env.ENVIRONMENT_TYPE }}
        deploymentMode: Validate
        scope: ResourceGroup

  psrules:
    runs-on: ubuntu-latest
    needs: [lint, validate]
    steps:
    - uses: actions/checkout@v3
      name: Checkout

    # Run analysis by using the PSRule GitHub action.
    - name: Run PSRule analysis
      uses: microsoft/ps-rule@v2.9.0
      continue-on-error: true
      with:
        modules: PSRule.Rules.Azure,PSRule
        inputPath: deploy/
        outputFormat: NUnit3
        outputPath: reports/ps-rule-resources.xml

      # Publish PSRule outputs as test results
    - name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action/composite@v2
      if: always()
      with:
        job_summary: true
        files: |
          reports/ps-rule-resources.xml

  snyk:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Run Snyk to check configuration files for security issues
        # Snyk can be used to break the build when it detects security issues.
        # In this case we want to upload the issues to GitHub Code Scanning
        continue-on-error: true
        uses: snyk/actions/iac@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --report
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif

  preview:
    runs-on: ubuntu-latest
    needs: [psrules]
    steps:
    - uses: actions/checkout@v3
    - uses: azure/login@v1
      name: Sign in to Azure
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    - uses: azure/arm-deploy@v1
      name: Run what-if
      with:
        failOnStdErr: false
        resourceGroupName: ${{ env.AZURE_RESOURCEGROUP_NAME }}
        template: deploy/main.bicep
        parameters: >
          environmentType=${{ env.ENVIRONMENT_TYPE }}
        additionalArguments: --what-if
        scope: ResourceGroup

  deploy:
    runs-on: ubuntu-latest
    environment: Website
    needs: preview
    outputs:
      appServiceAppHostName: ${{ steps.deploy.outputs.appServiceAppHostName }}
    steps:
    - uses: actions/checkout@v3
    - uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    - uses: azure/arm-deploy@v1
      id: deploy
      name: Deploy website
      with:
        failOnStdErr: false
        deploymentName: ${{ github.run_number }}
        resourceGroupName: ${{ env.AZURE_RESOURCEGROUP_NAME }}
        template: ./deploy/main.bicep
        parameters: ./deploy/main.bicepparam environmentType=${{ env.ENVIRONMENT_TYPE }} #storageAccountNameParam=${{ env.AZURE_STORAGE_ACCOUNT_NAME }}
        scope: ResourceGroup

  benchpress:
    runs-on: ubuntu-latest
    name: Validate infrastructure with BenchPress
    steps:
      - uses: actions/checkout@v3
        name: Checkout Repo
        id: checkout
        with:
          fetch-depth: 0

      - name: BenchPress tests
        id: benchpress
        uses: azure/powershell@v1
        with:
          inlineScript: |
            ./.github/workflows/Run-BenchPressTest.ps1 -StorageAccountName ${{ env.AZURE_STORAGE_ACCOUNT_NAME}} -Location ${{ env.LOCATION }} -ResourceGroupName ${{ env.AZURE_RESOURCEGROUP_NAME }}
          azPSVersion: "latest"
        env:
          AZ_ENCRYPTED_PASSWORD: ${{ secrets.AZ_ENCRYPTED_PASSWORD }}
          LOCATION: 'norwayeast'

  smoke-test:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - uses: actions/checkout@v3
    - run: |
        $container = New-PesterContainer `
          -Path 'deploy/Website.Tests.ps1' `
          -Data @{ HostName = '${{needs.deploy.outputs.appServiceAppHostName}}' }
        Invoke-Pester `
          -Container $container `
          -CI
      name: Run smoke tests
      shell: pwsh